#!/bin/bash

EXEC_DIR=${DEVEL_DIR}/src/hpp-constraintgraph-planner/build/tests
LOG_DIR=${DEVEL_DIR}/install/var/log/hpp

BOOST_TEST_LOG_LEVEL=all
EXEC=${EXEC_DIR}/benchmark

OUTPUT_DIR=~/devel/benchmark/log
PID_DIR=~/devel/benchmark/pid

TIMESTAMP='date +"%m/%d %H:%M:%S"'

TIMEOUT=3600 # seconds

NB_PROCESS=6
NB_TRY_PER_P=18
TRY_LIST=`seq 18 ${NB_TRY_PER_P}`
#SEQ_P_HtoNH="128 256 384 512 640 768 896"
#SEQ_P_NHtoH="128 256 384 512 640 768 896"
#SEQ_P_HtoNH="896 768 640 512 384 256 128"
#SEQ_P_NHtoH="896 768 640 512 384 256 128"
SEQ_P_HtoNH="640"
SEQ_P_NHtoH="384"

CFGNB=2

PROBLEM="door"

export BOOST_TEST_LOG_LEVEL
mkdir -p ${OUTPUT_DIR}
mkdir -p ${PID_DIR}

launch_atomic_test(){
  local __pidfile=$1
  local execfile=$2
  local problem=$3
  local timeout=$4
  local cfgnb=$5
  local p_nhtoh=$6
  local p_htonh=$7
  local try=$8
  local COMMAND="${execfile} ${problem} ${timeout} ${cfgnb} ${p_nhtoh} ${p_htonh}"
  echo "$(eval ${TIMESTAMP}) Command start: ${COMMAND}"
  ${COMMAND} > ${OUTPUT_DIR}/out.${problem}.${timeout}.${cfgnb}.${p_nhtoh}.${p_htonh}.${try} \
    2> ${OUTPUT_DIR}/err.${problem}.${timeout}.${cfgnb}.${p_nhtoh}.${p_htonh}.${try} &
  local APP_PID=$!
  wait ${APP_PID}
  mv ${LOG_DIR}/journal.${APP_PID}.log ${OUTPUT_DIR}/journal.${problem}.${timeout}.${cfgnb}.${p_nhtoh}.${p_htonh}.${try}
  mv ${LOG_DIR}/benchmark.${APP_PID}.log ${OUTPUT_DIR}/benchmark.${problem}.${timeout}.${cfgnb}.${p_nhtoh}.${p_htonh}.${try}
  echo "Command done : ${COMMAND}"
  rm -f ${__pidfile}
}

check_pidfiles() {
  while [ 1 ]; do
    for ((I_PROC=0; I_PROC<${NB_PROCESS}; I_PROC++)); do
      if [ ! -f ${PID_DIR}/proc${I_PROC}.pid ]; then
        echo "${PID_DIR}/proc${I_PROC}.pid"
        return;
      fi
    done
    sleep 5
  done
}

echo "Main script PID is $$"

for P_HtoNH in ${SEQ_P_HtoNH}; do
  for P_NHtoH in ${SEQ_P_NHtoH}; do
    for TRY in ${TRY_LIST}; do
      pidfile=$(check_pidfiles)
      launch_atomic_test "${pidfile}" "${EXEC}" "${PROBLEM}" "${TIMEOUT}" "${CFGNB}" "${P_NHtoH}" "${P_HtoNH}" "${TRY}" &
      ## Sleeping is required if you use srand(time(NULL)) to
      # change the seed. We ensure that the number of second 
      # is different for each run.
      sleep 1
      echo $! > ${pidfile}
    done
  done
done

wait

#!/bin/bash

#########################
# Define some functions #
#########################
MY_NAME=`basename $0`
echoerr() { echo "$@" 1>&2; }
show_help() {
  echo "Usage: $MY_NAME [options]
 -c|--configscript <file>     Use <file> as the configuration file. Default is ./configscript
                              With -g option, blank configuration will be written to <file>.
 -g|--generate-configscript   Write a blank configuration to config file with more detailed help.
                              Use -c to specify the file.
 -h|--help                    Show this help message."
}
generate_configscript() {
  exec 1> $CONFIGSCRIPT
  echo "##### REQUIRED VARIABLE #####"
  i=0
  for var in $REQUIRED_VARIABLE; do
    echo -e "${HELP_REQUIRED_VARIABLE[$i]}"
    echo "$var=\"${!var}\""
    i=`expr $i+1`
  done
  echo
  echo "##### OPTIONAL VARIABLE #####"
  for var in $OPTIONAL_VARIABLE; do
    echo "# $var=\"${!var}\""
  done
}
timestamp() {
  echo `date +"%m/%d %H:%M:%S"`
}
post_atomic_test() {
  echo -n ""
}
launch_atomic_test(){
  local _pidfile=$1
  local _try=$2
  local _COMMAND=$3
  shift 3
  local _outfile="${OUTPUT_DIRECTORY}/out"
  local _errfile="${OUTPUT_DIRECTORY}/err"
  for i; do
    _COMMAND="${_COMMAND} $i"
    _outfile="${_outfile}_$i"
    _errfile="${_errfile}_$i"
    shift
  done
  _outfile="${_outfile}_${_try}"
  _errfile="${_errfile}_${_try}"
  echo "$(timestamp) Command start (${_try}): ${_COMMAND}"
  ${_COMMAND} > ${_outfile} 2> ${_errfile} &
  local _app_pid=$!
  wait ${_app_pid}
  ## Call user defined function if needed
  post_atomic_test ${_app_pid} ${_try} ${_COMMAND} 
  echo "Command done (${_try}): ${_COMMAND}"
  rm -f ${_pidfile}
}
check_pidfiles() {
  while [ 1 ]; do
    for (( I_PROC=0; I_PROC<${NB_THREAD}; I_PROC++)); do
      if [ ! -f ${PID_DIR}/proc${I_PROC}.pid ]; then
        echo "${PID_DIR}/proc${I_PROC}.pid"
        return;
      fi
    done
    sleep 5
  done
}
loop_over_single_argument() {
  #echo "loop_over_single_argument $@"
  local _argnb=$1
  shift
  local _command=$@
  if [ "${_argnb}" -eq "${#ARGUMENTS[@]}" ]; then
    ## We can loop over the tries
    for (( TRY=0; TRY<$NB_TRY_FOR_EACH_ARG; TRY++)); do
      pidfile=$(check_pidfiles)
      launch_atomic_test "${pidfile}" "${TRY}" "${EXECUTABLE}" ${_command} &
      echo $! > ${pidfile}

      ## Sleeping is required if you use srand(time(NULL)) to
      # change the seed. We ensure that the number of second 
      # is different for each run.
      sleep 1
    done
  else
    ## We loop over argument values
    for a in ${!ARGUMENTS[$_argnb]}; do
      loop_over_single_argument `expr ${_argnb} + 1` ${_command} $a
    done
  fi
}

REQUIRED_VARIABLE="EXECUTABLE ARGUMENTS TIMEOUT"
declare -a HELP_REQUIRED_VARIABLE=(\
  [0]="# Path to executable"\
  [1]="# Name of the variables containing the arguments to pass to the executable,
# separeted with a space.
# Each variable declared in ARGUMENTS must then be defined.
# ARGUMENTS=(\"ARG1\" \"ARG2\")
# ARG1=\"1 2 3 4\"
# ARG2=\"5 6 7 8\""\
  [2]="# TIMEOUT is in second and must be left empty for no timeout"
  )
OPTIONAL_VARIABLE="OUTPUT_DIRECTORY PID_DIR NB_TRY_FOR_EACH_ARG NB_THREAD"

######################
# Default values
######################
OUTPUT_DIRECTORY="./output/"
PID_DIR="/var/run/$MY_NAME"
NB_TRY_FOR_EACH_ARG=1
TIMEOUT="" # seconds
NB_THREAD=$(expr `cat /proc/cpuinfo | grep processor | wc -l` - 1)
CONFIGSCRIPT="./configscript"
GENERATE_CONFIGSCRIPT=false

#########################
# Parse arguments
#########################
while [[ $# -ge 1 ]]; do
  key="$1"
  shift

  case $key in
    -c|--configscript)
      CONFIGSCRIPT="$1"
      if [ -r "$CONFIGSCRIPT" ]; then
        source $CONFIGSCRIPT
      fi
      shift
      ;;
    -g|--generate-configscript)
      GENERATE_CONFIGSCRIPT=1
      ;;
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      # unknown option
      echoerr "Unknown option $key"
      ;;
  esac
done

[ ! $GENERATE_CONFIGSCRIPT -eq 0 ] && generate_configscript && exit 0

if [ ! -r "$CONFIGSCRIPT" ]; then
  echoerr "Cannot access configuration script file $CONFIGSCRIPT"
  show_help
  exit 1
fi

[ -x $EXECUTABLE ] || echoerr "Configuration script must define EXECUTABLE"

mkdir -p ${OUTPUT_DIRECTORY}
mkdir -p ${PID_DIR}

echo "Main script PID is $$"

loop_over_single_argument 0

wait
